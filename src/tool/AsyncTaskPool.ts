/* AsyncTaskPool - something similar to Python's `multiprocessing.Pool()`
 * (Generated by ChatGPT) */

export class AsyncTaskPool {
  private poolSize: number;
  private currentTasks: number;
  private taskQueue: (() => Promise<void>)[];

  constructor(poolSize: number) {
    this.poolSize = poolSize;
    this.currentTasks = 0;
    this.taskQueue = [];
  }

  private runNextTask() {
    if (this.currentTasks < this.poolSize && this.taskQueue.length > 0) {
      const task = this.taskQueue.shift();
      if (task) {
        this.currentTasks++;
        task().finally(() => {
          this.currentTasks--;
          this.runNextTask();
        });
      }
    }
  }

  addTask(task: () => Promise<void>) {
    this.taskQueue.push(task);
    this.runNextTask();
  }

  async runAll() {
    while (this.taskQueue.length > 0 || this.currentTasks > 0) {
      await new Promise((resolve) => setTimeout(resolve, 100)); // Wait for all tasks to complete
    }
  }
}